{"version":3,"sources":["../src/shadcnPlugin.ts"],"sourcesContent":["import { type Config } from \"payload\";\n\n// We'll define a simplified type for AdminViewComponent\n// since we can't import it from payload/config\ntype AdminViewComponent = React.ComponentType<any>;\n\nexport interface ShadcnPluginOptions {\n  /**\n   * Enable or disable the plugin\n   * @default true\n   */\n  enabled?: boolean;\n\n  /**\n   * Enable all shadcn component overrides\n   * This will override all supported views and components with shadcn versions\n   * @default false\n   */\n  enableAll?: boolean;\n\n  /**\n   * Configure which collections should use the shadcn list view\n   * If enableAll is true, this is ignored and all collections will use shadcn list view\n   * @example [\"posts\", \"users\"]\n   * @default []\n   */\n  listView?: {\n    collections: string[];\n  };\n\n  /**\n   * Configure which collections should use the shadcn edit view\n   * If enableAll is true, this is ignored and all collections will use shadcn edit view\n   * @example [\"posts\", \"users\"]\n   * @default []\n   */\n  editView?: {\n    collections: string[];\n  };\n}\n\n/**\n * PayloadCMS Shadcn UI Plugin\n * Replaces default PayloadCMS components with shadcn UI components\n */\nexport const shadcnPlugin =\n  (options: ShadcnPluginOptions = {}) =>\n  (incomingConfig: Config): Config => {\n    // Set defaults\n    const opts: Required<ShadcnPluginOptions> = {\n      enabled: options.enabled ?? true,\n      enableAll: options.enableAll ?? false,\n      listView: {\n        collections: options.listView?.collections ?? [],\n      },\n      editView: {\n        collections: options.editView?.collections ?? [],\n      },\n    };\n\n    // If plugin is disabled, return unmodified config\n    if (!opts.enabled) return incomingConfig;\n\n    // Clone the config to avoid mutating the original\n    const config = {\n      ...incomingConfig,\n      collections: [...(incomingConfig.collections || [])],\n      admin: {\n        ...(incomingConfig.admin || {}),\n        components: {\n          ...(incomingConfig.admin?.components || {}),\n        },\n      },\n    };\n\n    // Loop through all collections and modify their admin configuration\n    if (config.collections && Array.isArray(config.collections)) {\n      config.collections = config.collections.map((collection) => {\n        // Skip if collection has no slug\n        if (!collection.slug) return collection;\n\n        // Determine if this collection should use shadcn components\n        const shouldUseListView =\n          opts.enableAll || opts.listView.collections.includes(collection.slug);\n        // const shouldUseEditView = opts.enableAll || opts.editView.collections.includes(collection.slug);\n\n        // If no views should be overridden for this collection, return it unchanged\n        if (!shouldUseListView) return collection;\n\n        return {\n          ...collection,\n          admin: {\n            ...collection.admin,\n            components: {\n              ...collection.admin?.components,\n              views: {\n                ...collection.admin?.components?.views,\n                ...(shouldUseListView && {\n                  list: {\n                    Component: \"@launchthat.apps/payload-shadcn/rsc#ListView\",\n                  },\n                }),\n                // Add edit view override when implemented\n                // ...(shouldUseEditView && {\n                //   edit: {\n                //     Component: \"@launchthat.apps/payload-shadcn/dist/components/views/EditView\",\n                //   },\n                // }),\n              },\n            },\n          },\n        };\n      });\n    }\n\n    // Set up onInit hook to log plugin initialization\n    const existingOnInit = config.onInit;\n    config.onInit = async (payload) => {\n      // Call existing onInit if it exists\n      if (existingOnInit) {\n        await existingOnInit(payload);\n      }\n\n      // Log which features are enabled\n      if (opts.enableAll) {\n        payload.logger.info(\n          \"✨ Payload Shadcn UI Plugin: All components enabled\",\n        );\n      } else {\n        if (opts.listView.collections.length > 0) {\n          payload.logger.info(\n            `✨ Payload Shadcn UI Plugin: List view enabled for collections: ${opts.listView.collections.join(\", \")}`,\n          );\n        }\n        if (opts.editView.collections.length > 0) {\n          payload.logger.info(\n            `✨ Payload Shadcn UI Plugin: Edit view enabled for collections: ${opts.editView.collections.join(\", \")}`,\n          );\n        }\n      }\n    };\n\n    return config;\n  };\n\nexport default shadcnPlugin;\n"],"names":["shadcnPlugin","options","incomingConfig","opts","enabled","enableAll","listView","collections","editView","config","admin","components","Array","isArray","map","collection","slug","shouldUseListView","includes","views","list","Component","existingOnInit","onInit","payload","logger","info","length","join"],"mappings":"AA6CA,OAAO,MAAMA,eACX,CAACC,UAA+B,CAAC,CAAC,GAClC,CAACC;QAEC,MAAMC,OAAsC;YAC1CC,SAASH,QAAQG,OAAO,IAAI;YAC5BC,WAAWJ,QAAQI,SAAS,IAAI;YAChCC,UAAU;gBACRC,aAAaN,QAAQK,QAAQ,EAAEC,eAAe,EAAE;YAClD;YACAC,UAAU;gBACRD,aAAaN,QAAQO,QAAQ,EAAED,eAAe,EAAE;YAClD;QACF;QAGA,IAAI,CAACJ,KAAKC,OAAO,EAAE,OAAOF;QAG1B,MAAMO,SAAS;YACb,GAAGP,cAAc;YACjBK,aAAa;mBAAKL,eAAeK,WAAW,IAAI,EAAE;aAAE;YACpDG,OAAO;gBACL,GAAIR,eAAeQ,KAAK,IAAI,CAAC,CAAC;gBAC9BC,YAAY;oBACV,GAAIT,eAAeQ,KAAK,EAAEC,cAAc,CAAC,CAAC;gBAC5C;YACF;QACF;QAGA,IAAIF,OAAOF,WAAW,IAAIK,MAAMC,OAAO,CAACJ,OAAOF,WAAW,GAAG;YAC3DE,OAAOF,WAAW,GAAGE,OAAOF,WAAW,CAACO,GAAG,CAAC,CAACC;gBAE3C,IAAI,CAACA,WAAWC,IAAI,EAAE,OAAOD;gBAG7B,MAAME,oBACJd,KAAKE,SAAS,IAAIF,KAAKG,QAAQ,CAACC,WAAW,CAACW,QAAQ,CAACH,WAAWC,IAAI;gBAItE,IAAI,CAACC,mBAAmB,OAAOF;gBAE/B,OAAO;oBACL,GAAGA,UAAU;oBACbL,OAAO;wBACL,GAAGK,WAAWL,KAAK;wBACnBC,YAAY;4BACV,GAAGI,WAAWL,KAAK,EAAEC,UAAU;4BAC/BQ,OAAO;gCACL,GAAGJ,WAAWL,KAAK,EAAEC,YAAYQ,KAAK;gCACtC,GAAIF,qBAAqB;oCACvBG,MAAM;wCACJC,WAAW;oCACb;gCACF,CAAC;4BAOH;wBACF;oBACF;gBACF;YACF;QACF;QAGA,MAAMC,iBAAiBb,OAAOc,MAAM;QACpCd,OAAOc,MAAM,GAAG,OAAOC;YAErB,IAAIF,gBAAgB;gBAClB,MAAMA,eAAeE;YACvB;YAGA,IAAIrB,KAAKE,SAAS,EAAE;gBAClBmB,QAAQC,MAAM,CAACC,IAAI,CACjB;YAEJ,OAAO;gBACL,IAAIvB,KAAKG,QAAQ,CAACC,WAAW,CAACoB,MAAM,GAAG,GAAG;oBACxCH,QAAQC,MAAM,CAACC,IAAI,CACjB,CAAC,+DAA+D,EAAEvB,KAAKG,QAAQ,CAACC,WAAW,CAACqB,IAAI,CAAC,OAAO;gBAE5G;gBACA,IAAIzB,KAAKK,QAAQ,CAACD,WAAW,CAACoB,MAAM,GAAG,GAAG;oBACxCH,QAAQC,MAAM,CAACC,IAAI,CACjB,CAAC,+DAA+D,EAAEvB,KAAKK,QAAQ,CAACD,WAAW,CAACqB,IAAI,CAAC,OAAO;gBAE5G;YACF;QACF;QAEA,OAAOnB;IACT,EAAE;AAEJ,eAAeT,aAAa"}