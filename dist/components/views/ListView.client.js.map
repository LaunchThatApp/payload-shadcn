{"version":3,"sources":["../../../src/components/views/ListView.client.tsx"],"sourcesContent":["\"use client\";\n\nimport { useMemo } from \"react\";\nimport { ColumnDef } from \"@tanstack/react-table\";\nimport { ArrowUpDown } from \"lucide-react\";\nimport { Column, LabelFunction, ListViewServerProps } from \"payload\";\n\nimport { Button } from \"../ui/button\";\nimport { Checkbox } from \"../ui/checkbox\";\nimport { DataTable } from \"../ui/data-table/data-table\";\n\n// Define a type that only includes serializable data\n// type PayloadAdminLayoutProps = {\n//   // Only include serializable fields from the original props\n//   items: any[];\n//   collectionSlug?: string;\n//   collectionLabel?: string;\n//   totalDocs?: number;\n//   canCreate?: boolean;\n// };\n\n// Simple date formatter function\nconst formatDate = (dateString: string): string => {\n  return new Date(dateString).toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  });\n};\n\ntype Document = {\n  id: string;\n  [key: string]: any;\n};\n\ninterface PayloadColumn {\n  accessor: string;\n  active: boolean;\n  field?: {\n    name: string;\n    label?: string;\n  };\n}\n\n// Client component that only receives serializable data\nexport default function ClientListView({\n  items,\n  collectionSlug,\n  collectionLabel,\n  totalDocs,\n  canCreate,\n  columnState,\n}: {\n  items: any;\n  collectionSlug: string;\n  collectionLabel: string;\n  totalDocs: any;\n  canCreate: boolean;\n  columnState: Column[];\n}) {\n  console.log(\"items\", items);\n\n  console.log(\"columnState\", columnState);\n  // This function is defined in the client component, not passed from server\n  // Transform PayloadCMS columns into shadcn table columns\n  const columns = useMemo<ColumnDef<Document>[]>(() => {\n    if (!columnState) return [];\n\n    const baseColumns: ColumnDef<Document>[] = [\n      {\n        id: \"select\",\n        header: ({ table }) => (\n          <Checkbox\n            checked={\n              table.getIsAllPageRowsSelected() ||\n              (table.getIsSomePageRowsSelected() && \"indeterminate\")\n            }\n            onCheckedChange={(value) =>\n              table.toggleAllPageRowsSelected(!!value)\n            }\n            aria-label=\"Select all\"\n          />\n        ),\n        cell: ({ row }) => (\n          <Checkbox\n            checked={row.getIsSelected()}\n            onCheckedChange={(value) => row.toggleSelected(!!value)}\n            aria-label=\"Select row\"\n          />\n        ),\n        enableSorting: false,\n        enableHiding: false,\n      },\n    ];\n\n    // Transform PayloadCMS columns into shadcn table columns\n    const payloadColumns: ColumnDef<Document>[] = (\n      columnState as PayloadColumn[]\n    ).map((col) => ({\n      accessorKey: col.accessor,\n      header: ({ column }) => {\n        return (\n          <Button\n            variant=\"ghost\"\n            onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n          >\n            {col.field?.label || col.accessor}\n            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n          </Button>\n        );\n      },\n      cell: ({ row }) => {\n        const value = row.getValue(col.accessor);\n\n        // Handle different value types\n        if (value === null || value === undefined) {\n          return \"-\";\n        }\n\n        if (typeof value === \"boolean\") {\n          return value ? \"Yes\" : \"No\";\n        }\n\n        if (typeof value === \"object\") {\n          if (col.accessor === \"breadcrumbs\" && Array.isArray(value)) {\n            return value\n              .map((crumb: { label: string }) => crumb.label)\n              .join(\" > \");\n          }\n          return JSON.stringify(value);\n        }\n\n        // Format dates\n        if (col.accessor === \"updatedAt\" || col.accessor === \"createdAt\") {\n          return new Date(value as string).toLocaleDateString();\n        }\n\n        return String(value);\n      },\n    }));\n\n    return [...baseColumns, ...payloadColumns];\n  }, [columnState]);\n  console.log(\"columns\", columns);\n\n  return (\n    <div className=\"p-4\">\n      <DataTable\n        columns={columns}\n        collectionLabel={collectionLabel}\n        collectionSlug={collectionSlug}\n        data={items || []}\n        onRowClick={(row) => {\n          window.location.href = `/admin/collections/${collectionSlug}/${row.id}`;\n        }}\n      />\n    </div>\n  );\n}\n"],"names":["useMemo","ArrowUpDown","Button","Checkbox","DataTable","formatDate","dateString","Date","toLocaleDateString","year","month","day","ClientListView","items","collectionSlug","collectionLabel","totalDocs","canCreate","columnState","console","log","columns","baseColumns","id","header","table","checked","getIsAllPageRowsSelected","getIsSomePageRowsSelected","onCheckedChange","value","toggleAllPageRowsSelected","aria-label","cell","row","getIsSelected","toggleSelected","enableSorting","enableHiding","payloadColumns","map","col","accessorKey","accessor","column","variant","onClick","toggleSorting","getIsSorted","field","label","className","getValue","undefined","Array","isArray","crumb","join","JSON","stringify","String","div","data","onRowClick","window","location","href"],"mappings":"AAAA;;AAEA,SAASA,OAAO,QAAQ,QAAQ;AAEhC,SAASC,WAAW,QAAQ,eAAe;AAG3C,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,SAAS,QAAQ,8BAA8B;AAaxD,MAAMC,aAAa,CAACC;IAClB,OAAO,IAAIC,KAAKD,YAAYE,kBAAkB,CAAC,SAAS;QACtDC,MAAM;QACNC,OAAO;QACPC,KAAK;IACP;AACF;AAiBA,eAAe,SAASC,eAAe,EACrCC,KAAK,EACLC,cAAc,EACdC,eAAe,EACfC,SAAS,EACTC,SAAS,EACTC,WAAW,EAQZ;IACCC,QAAQC,GAAG,CAAC,SAASP;IAErBM,QAAQC,GAAG,CAAC,eAAeF;IAG3B,MAAMG,UAAUrB,QAA+B;QAC7C,IAAI,CAACkB,aAAa,OAAO,EAAE;QAE3B,MAAMI,cAAqC;YACzC;gBACEC,IAAI;gBACJC,QAAQ,CAAC,EAAEC,KAAK,EAAE,GAChB,KAACtB;wBACCuB,SACED,MAAME,wBAAwB,MAC7BF,MAAMG,yBAAyB,MAAM;wBAExCC,iBAAiB,CAACC,QAChBL,MAAMM,yBAAyB,CAAC,CAAC,CAACD;wBAEpCE,cAAW;;gBAGfC,MAAM,CAAC,EAAEC,GAAG,EAAE,GACZ,KAAC/B;wBACCuB,SAASQ,IAAIC,aAAa;wBAC1BN,iBAAiB,CAACC,QAAUI,IAAIE,cAAc,CAAC,CAAC,CAACN;wBACjDE,cAAW;;gBAGfK,eAAe;gBACfC,cAAc;YAChB;SACD;QAGD,MAAMC,iBAAwC,AAC5CrB,YACAsB,GAAG,CAAC,CAACC,MAAS,CAAA;gBACdC,aAAaD,IAAIE,QAAQ;gBACzBnB,QAAQ,CAAC,EAAEoB,MAAM,EAAE;oBACjB,OACE,MAAC1C;wBACC2C,SAAQ;wBACRC,SAAS,IAAMF,OAAOG,aAAa,CAACH,OAAOI,WAAW,OAAO;;4BAE5DP,IAAIQ,KAAK,EAAEC,SAAST,IAAIE,QAAQ;4BACjC,KAAC1C;gCAAYkD,WAAU;;;;gBAG7B;gBACAlB,MAAM,CAAC,EAAEC,GAAG,EAAE;oBACZ,MAAMJ,QAAQI,IAAIkB,QAAQ,CAACX,IAAIE,QAAQ;oBAGvC,IAAIb,UAAU,QAAQA,UAAUuB,WAAW;wBACzC,OAAO;oBACT;oBAEA,IAAI,OAAOvB,UAAU,WAAW;wBAC9B,OAAOA,QAAQ,QAAQ;oBACzB;oBAEA,IAAI,OAAOA,UAAU,UAAU;wBAC7B,IAAIW,IAAIE,QAAQ,KAAK,iBAAiBW,MAAMC,OAAO,CAACzB,QAAQ;4BAC1D,OAAOA,MACJU,GAAG,CAAC,CAACgB,QAA6BA,MAAMN,KAAK,EAC7CO,IAAI,CAAC;wBACV;wBACA,OAAOC,KAAKC,SAAS,CAAC7B;oBACxB;oBAGA,IAAIW,IAAIE,QAAQ,KAAK,eAAeF,IAAIE,QAAQ,KAAK,aAAa;wBAChE,OAAO,IAAIpC,KAAKuB,OAAiBtB,kBAAkB;oBACrD;oBAEA,OAAOoD,OAAO9B;gBAChB;YACF,CAAA;QAEA,OAAO;eAAIR;eAAgBiB;SAAe;IAC5C,GAAG;QAACrB;KAAY;IAChBC,QAAQC,GAAG,CAAC,WAAWC;IAEvB,OACE,KAACwC;QAAIV,WAAU;kBACb,KAAC/C;YACCiB,SAASA;YACTN,iBAAiBA;YACjBD,gBAAgBA;YAChBgD,MAAMjD,SAAS,EAAE;YACjBkD,YAAY,CAAC7B;gBACX8B,OAAOC,QAAQ,CAACC,IAAI,GAAG,CAAC,mBAAmB,EAAEpD,eAAe,CAAC,EAAEoB,IAAIX,EAAE,EAAE;YACzE;;;AAIR"}